// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMyebpf returns the embedded CollectionSpec for myebpf.
func loadMyebpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MyebpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load myebpf: %w", err)
	}

	return spec, err
}

// loadMyebpfObjects loads myebpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*myebpfObjects
//	*myebpfPrograms
//	*myebpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMyebpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMyebpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// myebpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type myebpfSpecs struct {
	myebpfProgramSpecs
	myebpfMapSpecs
	myebpfVariableSpecs
}

// myebpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type myebpfProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// myebpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type myebpfMapSpecs struct {
}

// myebpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type myebpfVariableSpecs struct {
	PidFilter *ebpf.VariableSpec `ebpf:"pid_filter"`
}

// myebpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMyebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type myebpfObjects struct {
	myebpfPrograms
	myebpfMaps
	myebpfVariables
}

func (o *myebpfObjects) Close() error {
	return _MyebpfClose(
		&o.myebpfPrograms,
		&o.myebpfMaps,
	)
}

// myebpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMyebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type myebpfMaps struct {
}

func (m *myebpfMaps) Close() error {
	return _MyebpfClose()
}

// myebpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadMyebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type myebpfVariables struct {
	PidFilter *ebpf.Variable `ebpf:"pid_filter"`
}

// myebpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMyebpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type myebpfPrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *myebpfPrograms) Close() error {
	return _MyebpfClose(
		p.HandleTp,
	)
}

func _MyebpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed myebpf_bpfel.o
var _MyebpfBytes []byte
